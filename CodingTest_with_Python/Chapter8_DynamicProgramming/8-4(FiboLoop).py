# 반복문을 이용해 단순히 작은문제부터 차근차근 진행 = Bottom-Up

d = [0] * 100

d[1] = 1
d[2] = 1
n = 99

for i in range(3, n+1):
    d[i] = d[i-1] + d[i-2]

print(d[n])

# Top-Down(메모이제이션)은 하향식  Bottom-Up 상향식

# 다이나믹 프로그래밍의 전형적인 형태 = Bottom-Up
# Bottom up 결과 저장용 리스트 = DP 테이블
# 저장을 Dict나 List 등 여러 장소에 할 수 있음
# ex. 특정 값만 필요한 경우 Dict

'''
문제푸는 첫 단계 
다이나믹 프로그래밍 유형여부 파악
특정문제 완전 탐색 알고리즘으로 접근했을 때 시간이 오래 걸리면
다이나믹 프로그래밍 적용 가능 여부 확인(부분문제의 중복발생여부)

일단 재귀함수로 비효율 프로그램(탑다운)작성 후,
작은 문제에서 구한 답이 큰 답에 적용되면 메모이제이션 적용

재귀보단 보텀업 방식을 권장
시스템마다 재귀 함수 스택 크기 한정 가능성
Recursion depth 오류
sys 라이브러리의 setrecursionlimit() 함수 호출로 조절 가능

'''